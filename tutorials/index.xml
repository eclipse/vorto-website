<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Eclipse Vorto</title>
    <link>https://www.eclipse.org/vorto/tutorials/</link>
    <description>Recent content in Tutorials on Eclipse Vorto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 20:08:11 +0100</lastBuildDate>
    
	<atom:link href="https://www.eclipse.org/vorto/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connecting an ESP8266 to Eclipse Hono</title>
      <link>https://www.eclipse.org/vorto/tutorials/arduino/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/arduino/</guid>
      <description>&lt;p&gt;This tutorial explains how to generate an Arduino sketch for a given Information Model and send the device data to Eclipse Hono via MQTT.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Connecting a GrovePi to Eclipse Hono</title>
      <link>https://www.eclipse.org/vorto/tutorials/grovepi/</link>
      <pubDate>Fri, 09 Mar 2018 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/grovepi/</guid>
      <description>&lt;p&gt;This tutorial explains how to generate a simple Python application for you GrovePi that sends sensor data to Eclipse Hono using MQTT.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mapping device payload to standardized Vorto Function Blocks</title>
      <link>https://www.eclipse.org/vorto/tutorials/payloadmapping/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/payloadmapping/</guid>
      <description>&lt;p&gt;IoT Devices may not always send their data to the cloud in the structure and protocol that is required by the IoT platform that the devices are integrating with, e.g. AWS IoT, Azure IoT or Eclipse IoT. Eclipse Vorto provides the tools and libraries for you to achieve that.&lt;/p&gt;

&lt;p&gt;In this tutorial you are going to learn, how you create a Vorto Mapping Specification that maps a Distance Sensor JSON payload to standardized &lt;a href=&#34;https://github.com/IPSO-Alliance/pub&#34;&gt;IPSO&lt;/a&gt; Vorto Function Blocks and execute the mapping specification with the Vorto Mapping Engine. You will integrate the Distance Sensor payload with the Eclipse Ditto Digital Twin service but also learn how to extend the Vorto Mapping Engine to map to other IoT platforms.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to describe a TI SensorTag device with Vorto</title>
      <link>https://www.eclipse.org/vorto/tutorials/tisensor/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/tisensor/</guid>
      <description>This tutorial explains how to describe a device with Vorto using the example of a TI SensorTag. Read more about the benefits of Vorto in this blog post.
Prerequisite  Github account Device you want to describe Related specifications  Let&amp;rsquo;s get started Before you start, you need to understand what kind of information you need to describe your device with Vorto. You might find yourself confronted with a long list of specifications, but not all of them are needed.</description>
    </item>
    
  </channel>
</rss>