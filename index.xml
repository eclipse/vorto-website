<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse Vorto</title>
    <link>https://www.eclipse.org/vorto/</link>
    <description>Recent content on Eclipse Vorto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 May 2018 21:07:13 +0100</lastBuildDate>
    
	<atom:link href="https://www.eclipse.org/vorto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is Vorto?</title>
      <link>https://www.eclipse.org/vorto/introduction/</link>
      <pubDate>Mon, 28 May 2018 21:07:13 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/introduction/</guid>
      <description>TL;DR Vorto provides a Vorto Repository managing IoT device descriptions and providing code generators to integrate devices easily with various IoT platforms, e.g. Bosch IoT Suite, AWS IoT, ThingWorx and more.
 The indented use of the Vorto project is that a IoT Device is described using Vorto DSL. By providing a unified way to describe an IoT Device, a variety of services can be employed that draw on the information contained in the description.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://www.eclipse.org/vorto/gettingstarted/</link>
      <pubDate>Wed, 09 May 2018 10:58:37 +0800</pubDate>
      
      <guid>https://www.eclipse.org/vorto/gettingstarted/</guid>
      <description>To get started with Vorto easily, we are going to show you how you can use the Vorto IoT Tool to describe a simple device that measures distance and integrate it with Eclipse Hono.
Different types of Models Infomation Model Information Models represent the capabilities of a particular type of device in its entirety. An Information Model is assembled from abstract and re-usable Function Blocks.
Function Block A Function Block provides an abstract view on a device to applications that want to employ the devicesâ€™ functionality.</description>
    </item>
    
    <item>
      <title>Connecting an ESP8266 to Eclipse Hono</title>
      <link>https://www.eclipse.org/vorto/tutorials/arduino/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/arduino/</guid>
      <description>&lt;p&gt;This tutorial explains how to generate an Arduino sketch for a given Information Model and send the device data to Eclipse Hono via MQTT.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Connecting a GrovePi to Eclipse Hono</title>
      <link>https://www.eclipse.org/vorto/tutorials/grovepi/</link>
      <pubDate>Fri, 09 Mar 2018 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/grovepi/</guid>
      <description>&lt;p&gt;This tutorial explains how to generate a simple Python application for you GrovePi that sends sensor data to Eclipse Hono using MQTT.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mapping device payload to standardized Vorto Function Blocks</title>
      <link>https://www.eclipse.org/vorto/tutorials/payloadmapping/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/tutorials/payloadmapping/</guid>
      <description>&lt;p&gt;IoT Devices may not always send their data to the cloud in the structure and protocol that is required by the IoT platform that the devices are integrating with, e.g. AWS IoT, Azure IoT or Eclipse IoT. Eclipse Vorto provides the tools and libraries for you to achieve that.&lt;/p&gt;

&lt;p&gt;In this tutorial you are going to learn, how you create a Vorto Mapping Specification that maps a Distance Sensor JSON payload to standardized &lt;a href=&#34;https://github.com/IPSO-Alliance/pub&#34;&gt;IPSO&lt;/a&gt; Vorto Function Blocks and execute the mapping specification with the Vorto Mapping Engine. You will integrate the Distance Sensor payload with the Eclipse Ditto Digital Twin service but also learn how to extend the Vorto Mapping Engine to map to other IoT platforms.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Developer Guide</title>
      <link>https://www.eclipse.org/vorto/developerguide/</link>
      <pubDate>Wed, 09 May 2018 10:58:37 +0800</pubDate>
      
      <guid>https://www.eclipse.org/vorto/developerguide/</guid>
      <description>Repository API Search and access Vorto models as well as invoke Vorto Code Generators with the Repository Java Client
Repository Import API If you want to manage other existing (standardized) device descriptions with the Vorto Repository, you can implement a custom importer using the Importer API.
Device Payload Mapping API Map arbitrary device payload, expressed as JSON or binary, to standardized data, that is described by Vorto Information Models. See Payload Mapping Documentation for more information.</description>
    </item>
    
    <item>
      <title>Community</title>
      <link>https://www.eclipse.org/vorto/community/</link>
      <pubDate>Wed, 09 May 2018 10:58:37 +0800</pubDate>
      
      <guid>https://www.eclipse.org/vorto/community/</guid>
      <description>Presentations Here you can find links to arbitrary material covering Eclipse Vorto which has been presented at events, conferences and meet-ups.
&amp;ldquo;Eclipse Vorto: A Smart Approach to Connecting Industrial Products&amp;rdquo; (OMA Seminar October 2016)  Speaker : Alexander Edelmann (Bosch Software Innovations) Slides  &amp;ldquo;Eclipse Vorto: Device Payload Mapping&amp;rdquo; (Singapore Meetup 2018)  Speaker : Alexander Edelmann (Bosch Software Innovations) Slides  &amp;ldquo;Eclipse Vorto: Rapid Prototyping&amp;rdquo; (Eclipse Virtual IoT Meetup, July 2017)  Speaker : Alexander Edelmann (Bosch Software Innovations) Video  Mailing List A great way to stay up to date with Vorto activity is to subscribe to the Mailing list provided by Eclipse.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>https://www.eclipse.org/vorto/release-notes/</link>
      <pubDate>Wed, 09 Mar 2016 20:10:46 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/release-notes/</guid>
      <description>0.10.0 milestone 8 Fixes and Enhancements
 Email Notifications for Workflow actions, e.g. Pending Reviews, as well as comments Added more advanced Vorto DSL Validator Checks when importing Vorto Models or when creating/editing models via the Vorto Web Editor Various Bugfixes Generator Plugin SDK, which allows to build and deploy Vorto Generator plugins as standalone (micro)services and hook them into the Vorto repository.  0.10.0 milestone 7 Fixes and Enhancements</description>
    </item>
    
    <item>
      <title>Blogs</title>
      <link>https://www.eclipse.org/vorto/blogs/</link>
      <pubDate>Wed, 09 Mar 2016 20:10:46 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/blogs/</guid>
      <description>Avoid tight-coupling of devices in IoT solutions Read the blog post</description>
    </item>
    
    <item>
      <title>Vorto DSL Help</title>
      <link>https://www.eclipse.org/vorto/userguide/quickhelp_dsl/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/userguide/quickhelp_dsl/</guid>
      <description>&lt;p&gt;This section gets you started with using the Vorto DSL to describe devices as well as use the Mapping DSL to map device descriptions to spec platform models, e.g. LwM2M or even IoT Digital Twin Services.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vorto Model States</title>
      <link>https://www.eclipse.org/vorto/userguide/model_states/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/userguide/model_states/</guid>
      <description>&lt;p&gt;Vorto Models have a lifecycle and undergo various states. This section gives you an overview of these states and the actions that are possible.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Generators</title>
      <link>https://www.eclipse.org/vorto/userguide/generators/</link>
      <pubDate>Wed, 09 May 2018 10:58:37 +0800</pubDate>
      
      <guid>https://www.eclipse.org/vorto/userguide/generators/</guid>
      <description>&lt;p&gt;This section gives an overview of currently available Vorto Code Generators.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Payload Mapping</title>
      <link>https://www.eclipse.org/vorto/userguide/mappingengine/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/userguide/mappingengine/</guid>
      <description>&lt;p&gt;The payload mapping feature in Eclipse Vorto can be used to transform arbitrary payload to standardized Vorto messages and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vorto Meta Model</title>
      <link>https://www.eclipse.org/vorto/appendix/metamodel_uml/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/appendix/metamodel_uml/</guid>
      <description>&lt;p&gt;This image describes the Vorto Meta Model.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Information Model DSL</title>
      <link>https://www.eclipse.org/vorto/appendix/infomodel_dsl/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/appendix/infomodel_dsl/</guid>
      <description>&lt;p&gt;This section describes the DSL grammer for a Vorto Information Model.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Function Block DSL</title>
      <link>https://www.eclipse.org/vorto/appendix/function_block_dsl/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/appendix/function_block_dsl/</guid>
      <description>&lt;p&gt;This section describes the DSL grammer for a Vorto Function Block.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Datatype DSL</title>
      <link>https://www.eclipse.org/vorto/appendix/datatype_dsl/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/appendix/datatype_dsl/</guid>
      <description>&lt;p&gt;This section describes the DSL grammer for a Vorto Datatype&amp;hellip;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mapping DSL</title>
      <link>https://www.eclipse.org/vorto/appendix/mappings_dsl/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>https://www.eclipse.org/vorto/appendix/mappings_dsl/</guid>
      <description>&lt;p&gt;This section describes the DSL grammer for a Vorto Mapping.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>